# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Api {
  liveEndpoint: String!
  models: [EntityModel!]!
  mutations: [String!]!
  queries: [String!]!
  sandboxEndpoint: String!
  subscriptions: [String!]!
}

type AppConfig {
  apiConfig: Api!
  authConfig: Auth!
}

type Auth {
  _id: ObjectId!
  allowUnauthenticatedUsers: Boolean!
  clientRefreshTokenValidity: Float!
  defaultPasswordPolicy: Boolean!
  emailVerificationMessage: String!
  emailVerificationSubject: String!
  mfaConfiguration: String!
  mfaEnabled: Boolean!
  mfaTypes: String!
  passwordFieldId: String!
  passwordPolicyMinLength: Float!
  passwordRequiresNumbers: Boolean!
  passwordRequiresSymbols: Boolean!
  passwordRequiresUppercase: Boolean!
  requiredAttributes: [String!]!
  requiresAuth: Boolean!
  smsAuthenticationMessage: String!
  smsVerificationMessage: String!
  tableId: String!
  usernameCaseSensitive: Boolean!
  usernameFieldId: String!
}

input AuthInput {
  allowUnauthenticatedUsers: Boolean
  clientRefreshTokenValidity: Float
  defaultPasswordPolicy: Boolean
  emailVerificationMessage: String
  emailVerificationSubject: String
  mfaConfiguration: String
  mfaEnabled: Boolean
  mfaTypes: String
  passwordFieldId: String
  passwordPolicyMinLength: Float
  passwordRequiresNumbers: Boolean
  passwordRequiresSymbols: Boolean
  passwordRequiresUppercase: Boolean
  requiredAttributes: [String!]
  requiresAuth: Boolean
  smsAuthenticationMessage: String
  smsVerificationMessage: String
  tableId: String
  usernameCaseSensitive: Boolean
  usernameFieldId: String
}

type Connection {
  fieldNames: [String!]!
  keyName: String!
}

type DataAuth {
  allow: String!
  groupClaim: String!
  groups: [String!]!
  groupsField: String!
  identityClaim: String!
  operations: [String!]!
  ownerField: String!
  provider: String!
}

type DataField {
  _id: ObjectId!
  connection: [Connection!]
  dataType: String!
  fieldName: String!
  isHashed: Boolean!
  isUnique: Boolean!
  keys: [Key!]!
  nullable: Boolean!
  rules: [DataAuth!]!
}

input DataFieldInput {
  dataType: String!
  fieldName: String!
  isHashed: Boolean!
  isUnique: Boolean!
  nullable: Boolean!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type EntityModel {
  _id: ObjectId!
  auth: [DataAuth!]!
  fields: [DataField!]!
  keys: [Key!]!
  name: String!
}

type FieldError {
  field: String!
  message: String!
}

type Key {
  fieldNames: [String!]!
  name: String!
}

type Mutation {
  createDataField(dataField: DataFieldInput!, entityModelId: ObjectId!, projectId: ObjectId!): DataField
  createEntityModel(name: String!, projectId: ObjectId!): EntityModel
  createField: Boolean
  createMutation: Boolean
  createOrganization(organization: OrganizationInput!): Organization!
  createProject(project: ProjectInput!): Project!
  createQuery: Boolean
  createRelationship: Boolean
  createSubscription: Boolean
  createUser(user: UserInput!): User!
  deleteDataField(dataFieldId: ObjectId!, entityModelId: ObjectId!, projectId: ObjectId!): ObjectId
  deleteEntityModel(entityModelId: ObjectId!, projectId: ObjectId!): ObjectId
  deleteField: Boolean
  deleteMutations: Boolean
  deleteOrganization(organizationId: ObjectId!): ObjectId!
  deleteProject(projectId: ObjectId!): ObjectId!
  deleteQuery: Boolean
  deleteRelationship: Boolean
  deleteSubscription: Boolean
  login(email: String!, password: String!): UserResponse!
  logout: Boolean!
  publishApi(projectId: ObjectId!, sandbox: Boolean!): Boolean!
  register(email: String!, password: String!): UserResponse!
  updateAuth(input: AuthInput!, projectId: ObjectId!): Auth
  updateEntityModel: Boolean
  updateField: Boolean
  updateMutation: Boolean
  updateQuery: Boolean
  updateRelationship: Boolean
  updateSubscription: Boolean
}

"""Mongo object id scalar type"""
scalar ObjectId

type Organization {
  _id: ObjectId!
  members: [User!]!
  name: String!
  owner: User!
  projects: Project!
}

input OrganizationInput {
  name: String!
}

type Project {
  _id: ObjectId!
  appConfig: AppConfig!
  appId: String!
  organization: Organization!
  projectName: String!
}

input ProjectInput {
  organizationId: ObjectId!
  projectName: String!
}

type Query {
  getAuth(projectId: ObjectId!): Auth
  getProject(projectId: ObjectId!): Project!
  getServerStatus(projectId: ObjectId!, sandbox: Boolean!): Boolean!
  listEntityModel: Boolean
  listFields: Boolean
  listMutations: Boolean
  listOrganizations: [Organization!]!
  listProjects: [Project!]!
  listQueries: Boolean
  listRelationships: Boolean
  listSubscriptions: Boolean
  me: User
  retrieveEntityModel: Boolean
  retrieveField: Boolean
  retrieveMutation: Boolean
  retrieveQuery: Boolean
  retrieveRelationship: Boolean
  retrieveSubscription: Boolean
}

type User {
  _id: ObjectId!
  email: String!
  lastLogin: DateTime
  organizations: [Organization!]!
  status: String!
  userRole: String!
}

input UserInput {
  email: String!
  password: String!
}

type UserResponse {
  errors: [FieldError!]
  sessionId: String
  user: User
}
