# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Api {
  liveEndpoint: String
  models: [EntityModel!]!
  mutations: [String!]!
  queries: [String!]!
  sandboxEndpoint: String
  subscriptions: [String!]!
}

type AppConfig {
  appEntryComponentId: ObjectId
  variables: [AppVariable!]!
}

input AppConfigInput {
  appEntryComponentId: ObjectId
}

type AppVariable {
  _id: ObjectId!
  name: String!
  type: String!
}

type Asset {
  _id: ObjectId!
  key: String!
  name: String!
}

type AssetLibrary {
  _id: ObjectId!
  assets: [Asset!]!
}

type AssetSubscriptionPayload {
  _ids: [ObjectId!]!
  assets: [Asset!]!
  type: String!
}

type Auth {
  _id: ObjectId!
  allowUnauthenticatedUsers: Boolean!
  clientRefreshTokenValidity: Float!
  defaultPasswordPolicy: Boolean!
  emailVerificationMessage: String!
  emailVerificationSubject: String!
  mfaConfiguration: String!
  mfaEnabled: Boolean!
  mfaTypes: String!
  passwordFieldId: String!
  passwordPolicyMinLength: Float!
  passwordRequiresNumbers: Boolean!
  passwordRequiresSymbols: Boolean!
  passwordRequiresUppercase: Boolean!
  requiredAttributes: [String!]!
  requiresAuth: Boolean!
  smsAuthenticationMessage: String!
  smsVerificationMessage: String!
  tableId: String!
  usernameCaseSensitive: Boolean!
  usernameFieldId: String!
}

input AuthInput {
  allowUnauthenticatedUsers: Boolean
  clientRefreshTokenValidity: Float
  defaultPasswordPolicy: Boolean
  emailVerificationMessage: String
  emailVerificationSubject: String
  mfaConfiguration: String
  mfaEnabled: Boolean
  mfaTypes: String
  passwordFieldId: String
  passwordPolicyMinLength: Float
  passwordRequiresNumbers: Boolean
  passwordRequiresSymbols: Boolean
  passwordRequiresUppercase: Boolean
  requiredAttributes: [String!]
  requiresAuth: Boolean
  smsAuthenticationMessage: String
  smsVerificationMessage: String
  tableId: String
  usernameCaseSensitive: Boolean
  usernameFieldId: String
}

type BindingContext {
  menu: [MenuStructure!]!
  structure: [DataStructure!]!
}

type Component {
  _id: ObjectId!
  componentType: PackageComponentType!
  data: JSONObject
  fetched: [DataSource!]
  layerSort: String!
  layout: JSONObject
  name: String!
  package: String!
  parameters: [RequiredParameter!]
  parent: ObjectId
  props: JSONObject
  requiresAuth: Boolean
  type: String!
  x: Float
  y: Float
}

input ComponentInput {
  componentType: PackageComponentType
  data: JSONObject
  fetched: [DataSourceInput!]
  layerSort: String
  layout: JSONObject
  name: String
  package: String
  parameters: [RequiredParameterInput!]
  parent: ObjectId
  props: JSONObject
  requiresAuth: Boolean
  type: String
  x: Float
  y: Float
}

type ComponentSubscriptionPayload {
  _ids: [ObjectId!]!
  components: [Component!]!
  type: String!
}

type DataAuth {
  allow: String!
  groupClaim: String!
  groups: [String!]!
  groupsField: String!
  identityClaim: String!
  operations: [String!]!
  ownerField: String!
  provider: String!
}

type DataContext {
  componentId: String!
  dataSources: [String!]!
  name: String!
}

type DataField {
  _id: ObjectId!
  connection: Boolean
  dataType: String!
  fieldName: String!
  isHashed: Boolean!
  isList: Boolean
  isUnique: Boolean!
  keys: [Key!]!
  nullable: Boolean!
  rules: [DataAuth!]!
}

input DataFieldInput {
  dataType: String!
  fieldName: String!
  isHashed: Boolean!
  isList: Boolean!
  isUnique: Boolean!
  nullable: Boolean!
}

type DataSource {
  entityType: JSONObject!
  variables: [JSONObject!]!
}

input DataSourceInput {
  entityType: JSONObject!
  variables: [JSONObject!]!
}

type DataStructure {
  _id: String!
  fields: [MenuStructure!]!
  name: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type EntityModel {
  _id: ObjectId!
  auth: [DataAuth!]!
  fields: [DataField!]!
  isLocal: Boolean!
  keys: [Key!]!
  name: String!
}

type FieldError {
  field: String!
  message: String!
}

type Invitation {
  _id: ObjectId!
  acceptedDate: DateTime
  organizationId: ObjectId!
  userEmail: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Key {
  fieldNames: [String!]!
  name: String!
}

type LabelLibrary {
  labelTags: [LabelTag!]!
  languages: [Language!]!
  translations: [LanguageTranslation!]!
}

type LabelTag {
  _id: ObjectId!
  name: String!
  numberOfStates: Float!
}

type Language {
  _id: ObjectId!
  code: String!
  name: String!
}

type LanguageTranslation {
  language: ObjectId!
  translations: [Translation!]!
}

type MenuStructure {
  entity: String!
  hasSubMenu: Boolean!
  label: String!
  source: String!
  type: String!
}

type Mutation {
  acceptInvitaion(invitationId: ObjectId!): Boolean!
  addParameter(componentId: ObjectId!, parameterInput: RequiredParameterInput!): Boolean!
  changePassword(newPassword: String!, oldPassword: String!): Boolean!
  createAppVariable(name: String!, projectId: ObjectId!, type: String!): AppVariable!
  createAssetFolder(folderName: String!, projectId: ObjectId!): Boolean!
  createComponent(componentInput: ComponentInput!, projectId: ObjectId!): Component!
  createDataField(dataField: DataFieldInput!, entityModelId: ObjectId!, projectId: ObjectId!): DataField
  createEntityModel(isLocal: Boolean!, name: String!, projectId: ObjectId!): EntityModel
  createLabelTag(numberOfStates: Int!, projectId: ObjectId!, tagName: String!): Project!
  createLanguage(languageCode: String!, languageName: String!, projectId: ObjectId!): Project!
  createMutation: Boolean
  createOrganization(organization: OrganizationInput!): Organization!
  createPackage(packageInput: PackageInput!): Package!
  createProject(project: ProjectInput!): Project!
  createQuery: Boolean
  createRelationship: Boolean
  createSubscription: Boolean
  createTranslation(languageId: ObjectId!, projectId: ObjectId!, tagId: ObjectId!, translations: [String!]!): Project!
  createUser(user: UserInput!): User!
  deleteAppVariable(projectId: ObjectId!, variableId: ObjectId!): Boolean!
  deleteAsset(imageId: ObjectId!, projectId: ObjectId!): Boolean!
  deleteComponents(componentIds: [ObjectId!]!, projectId: ObjectId!): [ObjectId!]!
  deleteDataField(dataFieldId: ObjectId!, entityModelId: ObjectId!, projectId: ObjectId!): ObjectId
  deleteEntityModel(entityModelId: ObjectId!, projectId: ObjectId!): ObjectId
  deleteInvitation(email: String!, organizationId: ObjectId!): Boolean!
  deleteMutations: Boolean
  deleteOrganization(organizationId: ObjectId!): ObjectId!
  deleteProject(projectId: ObjectId!): ObjectId!
  deleteQuery: Boolean
  deleteRelationship: Boolean
  deleteSubscription: Boolean
  duplicateComponent(componentId: ObjectId!, projectId: ObjectId!): Boolean!
  forgotPassword(email: String!): Boolean!
  inviteMember(email: String!, organizationId: ObjectId!, sendInvite: Boolean): Invitation!
  login(email: String!, password: String!): UserResponse!
  logout: Boolean!
  publishApi(projectId: ObjectId!, sandbox: Boolean!, version: String!): Boolean!
  publishPackageComponents(componentInput: [PackageComponentInput!]!): [PackageComponent!]!
  register(email: String!, password: String!): UserResponse!
  removeParameter(componentId: ObjectId!, parameterId: ObjectId!): Boolean!
  resetPassword(newPassword: String!, token: String!): Boolean!
  updateAppConfig(appConfig: AppConfigInput!, projectId: ObjectId!): Boolean!
  updateAssetMetaData(projectId: ObjectId!): Boolean!
  updateAuth(input: AuthInput!, projectId: ObjectId!): Auth
  updateComponent(componentId: ObjectId!, componentInput: ComponentInput!): Component!
  updateComponentLayout(componentId: ObjectId!, layout: JSONObject!): Component
  updateComponentProps(componentId: ObjectId!, props: JSONObject!): Component
  updateEntityModel: Boolean
  updateImageMetaData(projectId: ObjectId!): Boolean!
  updateMe(userInput: UserInput!): User!
  updateMutation: Boolean
  updateParameter(componentId: ObjectId!, parameterId: ObjectId!, parameterInput: RequiredParameterInput!): Boolean!
  updatePreviewerData(data: JSONObject, projectId: ObjectId!): Previewer!
  updateProject(project: UpdateProjectInput!, projectId: ObjectId!): Project!
  updateQuery: Boolean
  updateRelationship: Boolean
  updateSubscription: Boolean
  updateTranslation(languageId: ObjectId!, projectId: ObjectId!, tagId: ObjectId!, translations: [String!]!): Project!
  uploadAsset(file: Upload!, folder: String!, projectId: ObjectId!): Boolean!
}

"""Mongo object id scalar type"""
scalar ObjectId

type Organization {
  _id: ObjectId!
  members: [User!]!
  name: String!
  owner: User!
  projects: Project!
}

input OrganizationInput {
  name: String!
}

type Package {
  _id: ObjectId!
  authorId: ObjectId!
  bundle: String!
  components: [PackageComponent!]!
  packageName: String!
  repositoryUrl: String!
  scope: PackageScope!
  version: String!
}

type PackageComponent {
  _id: ObjectId!
  componentType: PackageComponentType!
  defaultLayoutValue: JSONObject
  defaultPropValue: JSONObject
  icon: String!
  name: String!
  schema: JSONObject!
}

input PackageComponentInput {
  componentType: PackageComponentType!
  defaultLayoutValue: JSONObject
  defaultPropValue: JSONObject!
  icon: String!
  name: String!
  schema: JSONObject!
}

"""
The type of component, dictates where it can be dropped or if things can be dropped on it
"""
enum PackageComponentType {
  Container
  Element
  Screen
  Stack
}

input PackageInput {
  authorId: ObjectId!
  bundle: String!
  components: [PackageComponentInput!]!
  packageName: String!
  repositoryUrl: String!
  scope: PackageScope!
  version: String!
}

"""
The scope of the package. Globals are default available to everyone, Public are usable by everyone, Private is usable by permissions
"""
enum PackageScope {
  Global
  Private
  Public
}

type Previewer {
  _id: ObjectId!
  data: JSONObject
  project: Project!
}

type Project {
  _id: ObjectId!
  appConfig: AppConfig!
  appId: String!
  assetLibrary: AssetLibrary
  labelLibrary: LabelLibrary!
  organization: Organization!
  projectName: String!
  serverConfig: ServerConfig!
}

input ProjectInput {
  organizationId: ObjectId!
  projectName: String!
}

type Query {
  getAuth(projectId: ObjectId!): Auth
  getBindingTree(componentId: ObjectId!, projectId: ObjectId!): BindingContext!
  getComponent(componentId: ObjectId!): Component
  getComponents(projectId: ObjectId!): [Component!]!
  getDataContext(componentId: ObjectId!): [DataContext!]!
  getEntityModel(entityModelId: ObjectId!, projectId: ObjectId!): EntityModel
  getLabelLibrary(projectId: ObjectId!): LabelLibrary
  getPackageComponent(packageComponentId: ObjectId!): PackageComponent
  getPackageComponents: [PackageComponent!]!
  getPackages: [Package!]!
  getPreviewerData(projectId: ObjectId!): Previewer!
  getProject(projectId: ObjectId!): Project!
  getServerStatus(projectId: ObjectId!, sandbox: Boolean!): Boolean!
  invitation(invitationId: ObjectId!): Invitation!
  listAssetFolder(projectId: ObjectId!): [Asset!]!
  listEntityModel: Boolean
  listMutations: Boolean
  listOrganizations: [Organization!]!
  listProjects: [Project!]!
  listQueries: Boolean
  listRelationships: Boolean
  listSubscriptions: Boolean
  me: User
  retrieveMutation: Boolean
  retrieveQuery: Boolean
  retrieveRelationship: Boolean
  retrieveSubscription: Boolean
}

type RequiredParameter {
  _id: ObjectId!
  entityType: ObjectId!
  label: String!
  path: String!
}

input RequiredParameterInput {
  entityType: ObjectId!
  label: String!
  path: String!
}

type ServerConfig {
  apiConfig: Api!
  authConfig: Auth!
  version: String!
}

type Subscription {
  onAssetChange(projectId: ObjectId!): AssetSubscriptionPayload!
  onComponentChange(projectId: ObjectId!): ComponentSubscriptionPayload!
}

type Translation {
  tag: ObjectId!
  value: [String!]!
}

input UpdateProjectInput {
  projectName: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _id: ObjectId!
  email: String!
  fullName: String
  invitations: [Invitation!]!
  lastLogin: DateTime
  organizations: [Organization!]!
  status: String!
  userRole: String!
}

input UserInput {
  email: String!
  fullName: String
  username: String
}

type UserResponse {
  errors: [FieldError!]
  sessionId: String
  user: User
}
