# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Api {
  liveEndpoint: String
  models: [EntityModel!]!
  mutations: [String!]!
  queries: [String!]!
  sandboxEndpoint: String
  subscriptions: [String!]!
}

type AppConfig {
  apiConfig: Api!
  authConfig: Auth!
}

type Auth {
  _id: ObjectId!
  allowUnauthenticatedUsers: Boolean!
  clientRefreshTokenValidity: Float!
  defaultPasswordPolicy: Boolean!
  emailVerificationMessage: String!
  emailVerificationSubject: String!
  mfaConfiguration: String!
  mfaEnabled: Boolean!
  mfaTypes: String!
  passwordFieldId: String!
  passwordPolicyMinLength: Float!
  passwordRequiresNumbers: Boolean!
  passwordRequiresSymbols: Boolean!
  passwordRequiresUppercase: Boolean!
  requiredAttributes: [String!]!
  requiresAuth: Boolean!
  smsAuthenticationMessage: String!
  smsVerificationMessage: String!
  tableId: String!
  usernameCaseSensitive: Boolean!
  usernameFieldId: String!
}

input AuthInput {
  allowUnauthenticatedUsers: Boolean
  clientRefreshTokenValidity: Float
  defaultPasswordPolicy: Boolean
  emailVerificationMessage: String
  emailVerificationSubject: String
  mfaConfiguration: String
  mfaEnabled: Boolean
  mfaTypes: String
  passwordFieldId: String
  passwordPolicyMinLength: Float
  passwordRequiresNumbers: Boolean
  passwordRequiresSymbols: Boolean
  passwordRequiresUppercase: Boolean
  requiredAttributes: [String!]
  requiresAuth: Boolean
  smsAuthenticationMessage: String
  smsVerificationMessage: String
  tableId: String
  usernameCaseSensitive: Boolean
  usernameFieldId: String
}

type Component {
  _id: ObjectId!
  children: [Component!]
  fetched: [DataSource!]
  isContainer: Boolean!
  isRootElement: Boolean!
  name: String!
  package: String!
  parameters: [RequiredParameter!]
  parent: Component
  props: String
  type: String!
  x: Float
  y: Float
}

input ComponentInput {
  children: [ObjectId!]
  fetched: [DataSourceInput!]
  isContainer: Boolean
  isRootElement: Boolean
  name: String
  package: String
  parameters: [RequiredParameterInput!]
  parent: ObjectId
  props: String
  type: String
  x: Float
  y: Float
}

type DataAuth {
  allow: String!
  groupClaim: String!
  groups: [String!]!
  groupsField: String!
  identityClaim: String!
  operations: [String!]!
  ownerField: String!
  provider: String!
}

type DataContext {
  componentId: String!
  dataSources: [String!]!
  name: String!
}

type DataField {
  _id: ObjectId!
  connection: Boolean
  dataType: String!
  fieldName: String!
  isHashed: Boolean!
  isList: Boolean
  isUnique: Boolean!
  keys: [Key!]!
  nullable: Boolean!
  rules: [DataAuth!]!
}

input DataFieldInput {
  dataType: String!
  fieldName: String!
  isHashed: Boolean!
  isList: Boolean!
  isUnique: Boolean!
  nullable: Boolean!
}

type DataSource {
  type: String!
  variables: [String!]!
}

input DataSourceInput {
  type: String!
  variables: [String!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type EntityModel {
  _id: ObjectId!
  auth: [DataAuth!]!
  fields: [DataField!]!
  keys: [Key!]!
  name: String!
}

type FieldError {
  field: String!
  message: String!
}

type Key {
  fieldNames: [String!]!
  name: String!
}

type LabelLibrary {
  labelTags: [LabelTag!]!
  languages: [Language!]!
  translations: [LanguageTranslation!]!
}

type LabelTag {
  _id: ObjectId!
  name: String!
  numberOfStates: Float!
}

type Language {
  _id: ObjectId!
  code: String!
  name: String!
}

type LanguageTranslation {
  language: ObjectId!
  translations: [Translation!]!
}

type Mutation {
  addParameter(componentId: ObjectId!, parameterInput: RequiredParameterInput!): Boolean!
  createComponent(componentInput: ComponentInput!, projectId: ObjectId!): Component!
  createDataField(dataField: DataFieldInput!, entityModelId: ObjectId!, projectId: ObjectId!): DataField
  createEntityModel(name: String!, projectId: ObjectId!): EntityModel
  createLabelTag(numberOfStates: Int!, projectId: ObjectId!, tagName: String!): Project!
  createLanguage(languageCode: String!, languageName: String!, projectId: ObjectId!): Project!
  createMutation: Boolean
  createOrganization(organization: OrganizationInput!): Organization!
  createProject(project: ProjectInput!): Project!
  createQuery: Boolean
  createRelationship: Boolean
  createSubscription: Boolean
  createTranslation(languageId: ObjectId!, projectId: ObjectId!, tagId: ObjectId!, translations: [String!]!): Project!
  createUser(user: UserInput!): User!
  deleteComponents(componentIds: [ObjectId!]!, projectId: ObjectId!): [ObjectId!]!
  deleteDataField(dataFieldId: ObjectId!, entityModelId: ObjectId!, projectId: ObjectId!): ObjectId
  deleteEntityModel(entityModelId: ObjectId!, projectId: ObjectId!): ObjectId
  deleteMutations: Boolean
  deleteOrganization(organizationId: ObjectId!): ObjectId!
  deleteProject(projectId: ObjectId!): ObjectId!
  deleteQuery: Boolean
  deleteRelationship: Boolean
  deleteSubscription: Boolean
  login(email: String!, password: String!): UserResponse!
  logout: Boolean!
  publishApi(projectId: ObjectId!, sandbox: Boolean!): Boolean!
  register(email: String!, password: String!): UserResponse!
  removeParameter(componentId: ObjectId!, parameterId: ObjectId!): Boolean!
  updateAuth(input: AuthInput!, projectId: ObjectId!): Auth
  updateComponent(componentId: ObjectId!, componentInput: ComponentInput!): Component!
  updateEntityModel: Boolean
  updateMutation: Boolean
  updateParameter(componentId: ObjectId!, parameterId: ObjectId!, parameterInput: RequiredParameterInput!): Boolean!
  updateProject(project: UpdateProjectInput!, projectId: ObjectId!): Project!
  updateQuery: Boolean
  updateRelationship: Boolean
  updateSubscription: Boolean
  updateTranslation(languageId: ObjectId!, projectId: ObjectId!, tagId: ObjectId!, translations: [String!]!): Project!
}

"""Mongo object id scalar type"""
scalar ObjectId

type Organization {
  _id: ObjectId!
  members: [User!]!
  name: String!
  owner: User!
  projects: Project!
}

input OrganizationInput {
  name: String!
}

type Project {
  _id: ObjectId!
  appConfig: AppConfig!
  appId: String!
  body: String
  components: [Component!]!
  labelLibrary: LabelLibrary!
  organization: Organization!
  projectName: String!
}

input ProjectInput {
  body: String
  organizationId: ObjectId!
  projectName: String!
}

type Query {
  getAuth(projectId: ObjectId!): Auth
  getComponent(componentId: ObjectId!): Component
  getComponents(projectId: ObjectId!): [Component!]!
  getDataContext(componentId: ObjectId!): [DataContext!]!
  getEntityModel(entityModelId: ObjectId!, projectId: ObjectId!): EntityModel
  getLabelLibrary(projectId: ObjectId!): LabelLibrary
  getProject(projectId: ObjectId!): Project!
  getServerStatus(projectId: ObjectId!, sandbox: Boolean!): Boolean!
  listEntityModel: Boolean
  listMutations: Boolean
  listOrganizations: [Organization!]!
  listProjects: [Project!]!
  listQueries: Boolean
  listRelationships: Boolean
  listSubscriptions: Boolean
  me: User
  retrieveMutation: Boolean
  retrieveQuery: Boolean
  retrieveRelationship: Boolean
  retrieveSubscription: Boolean
}

type RequiredParameter {
  _id: ObjectId!
  entityId: ObjectId!
  name: String!
}

input RequiredParameterInput {
  entityId: ObjectId!
  name: String!
}

type Translation {
  tag: ObjectId!
  value: [String!]!
}

input UpdateProjectInput {
  body: String!
  projectName: String
}

type User {
  _id: ObjectId!
  email: String!
  lastLogin: DateTime
  organizations: [Organization!]!
  status: String!
  userRole: String!
}

input UserInput {
  email: String!
  password: String!
}

type UserResponse {
  errors: [FieldError!]
  sessionId: String
  user: User
}
