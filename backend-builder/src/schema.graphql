# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Api {
  models: [EntityModel!]!
  mutation: [String!]!
  queries: [String!]!
  subscriptions: [String!]!
}

type AppConfig {
  apiConfig: Api!
}

type Auth {
  allow: String!
  groupClaim: String!
  groups: [String!]!
  groupsField: String!
  identityClaim: String!
  operations: [String!]!
  ownerField: String!
  provider: String!
}

type Connection {
  fieldNames: [String!]!
  keyName: String!
}

type DataField {
  connections: [Connection!]!
  dataType: String!
  fieldName: String!
  isHashed: Boolean!
  isUnique: Boolean!
  keys: [Key!]!
  rules: [Auth!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type EntityModel {
  _id: ObjectId!
  auth: [Auth!]!
  fields: [DataField!]!
  keys: [Key!]!
  name: String!
}

type FieldError {
  field: String!
  message: String!
}

type Key {
  fieldNames: [String!]!
  name: String!
}

type Mutation {
  createOrganization(organization: OrganizationInput!): Organization!
  createProject(project: ProjectInput!): Project!
  createUser(user: UserInput!): User!
  login(email: String!, password: String!): UserResponse!
  logout: Boolean!
  register(email: String!, password: String!): UserResponse!
}

"""Mongo object id scalar type"""
scalar ObjectId

type Organization {
  _id: ObjectId!
  members: [User!]!
  name: String!
  owner: User!
  projects: Project!
}

input OrganizationInput {
  name: String!
}

type Project {
  appConfig: AppConfig!
  id: Float!
  organization: Organization!
  projectName: String!
}

input ProjectInput {
  organizationId: ObjectId!
  projectName: String!
}

type Query {
  listOrganizations: [Organization!]!
  me: User
}

type User {
  _id: ObjectId!
  email: String!
  lastLogin: DateTime
  organizations: [Organization!]!
  password: String!
  status: String!
  userRole: String!
}

input UserInput {
  email: String!
  password: String!
}

type UserResponse {
  errors: [FieldError!]
  sessionId: String
  user: User
}
